#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("server:server");
const http = require("http")




/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = require('socket.io')(server,   { 
    cors: {
      origin: process.env.FRONTEND_URL,
      methods: ["GET", "POST"],
      allowedHeaders: ["my-custom-header"],
      credentials: true
  }

});
app.set('socketio', io)


const Conversation = require("../models/Conversation");
const Message = require("../models/Message");


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(`listening on *:${port}`);
});

io.on('connection', (socket) => { /* socket object may be used to send specific messages to the new connected client */
  socket.emit('id', socket.id)
  socket.emit('connection', null);
  socket.on('channel-join', id => {
    Conversation.find().then((response) => {
      response.forEach(c => {

        if (c._id.toString()=== id.toString()) {
            if (c.sockets.indexOf(socket.id) === (-1)) {
              c.sockets.push(socket.id);
              
              c.participants++;
              io.emit('channel', c);
            }
        } else {
            let index = c.sockets.indexOf(socket.id);
            if (index != (-1)) {
                c.sockets.splice(index, 1);
                c.participants--;
                io.emit('channel', c);
            }
        }
        })
      })

    });


  socket.on('send-message', message => {
    io.emit('message', message);
  });

  socket.on('send-notification', notification => {
    console.log(notification)
    io.emit('notification', notification);
  });

  

});



server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log(
    "\x1b[34m%s\x1b[1m",
    `Server listening @ http://localhost:${process.env.PORT}`
  );
}
